{"version":3,"file":"pillbug.js","sources":["../src/core.js"],"sourcesContent":["/*\n * Pillbug (https://github.com/andyhasit/pillbug)\n */\n\nconst doc = document;\n\n\nexport class App {\n  /* The root object which you mount top level views to */\n  constructor() {\n    this._nested_ = []\n  }\n  mount(viewClass, idEl, obj) {\n    /* Mounts a top level view and builds it instantly.\n     *\n     * @param {class} viewClass - The class of the view.\n     * @param {idEl} id or element to wrap\n     * @param {obj} optional, gets passed to view constructor\n     */\n    let view = new viewClass(this, obj)\n    bindWrapper(idEl, view.root)\n    this._nested_.push(view)\n  }\n  update() {\n    /* Propagates the update call to all nested views */\n    this._nested_.forEach(v => v.update())\n  }\n}\n\n\nexport class View {\n  constructor(app, obj, seq, parent) {\n    let s = this\n    s.app = app             // Reference to the containing app\n    s.obj = obj             // The object passed to the view\n    s.seq = seq             // The key - only for nested views\n    s.parent = parent       // The parent view\n    s.root = undefined      // This view's root wrapper\n    s._nested_ = []         // Nested views\n    s._named_ = {}          // Named elements or views\n    s._watches_ = {}        // Watches\n    s._previous_ = {}       // The previous values for watches to compare against\n    \n    // The args to pass into methods\n    s._args_ = [\n      s.app,             // app\n      s.box.bind(s),     // box\n      s.build.bind(s),   // build\n      s.el.bind(s),      // el\n      s.h.bind(s),       // h\n      s.obj,             // obj\n      s.seq,             // seq\n      s.watch.bind(s)    // watch\n    ]\n    s.init(...s._args_)\n  }\n  as(name) {\n    /*  Saves it as 'name'\n     */\n    this.parent._saveAs_(this, name)\n    return this // Keep this because people will use it like on the wrapper.\n  }\n  build(desc, atts, inner) {\n    return this.root = this.h(desc, atts, inner)\n  }\n  box(viewClass, obj) {\n    /*\n     * Builds a nested view of the specified class.\n     * No caching is used. Use a cache object returned by this.cache() if you need caching.\n     */\n    let view = new viewClass(this.app, obj, undefined, this)\n    this._nested_.push(view)\n    return view\n  }\n  el(name) {\n    return this._named_[name]\n  }\n  h(tag, atts, inner) {\n    /*\n     *   The bound equivalent of h(). Ensures Wrappers have reference to this view.\n     */\n    if (und(inner)) {\n      inner = atts\n      atts = {}\n    }\n    let el = h(tag, atts, inner, this)\n    return el\n  }\n  update(newObj) {\n    /*  \n     *   The external call to update the view. \n     *   @newObj -- new object, else it keeps its old (which is fine)\n     */\n    if (!und(newObj)) {\n      this.obj = newObj\n    }\n    this._update_(this._args_)\n  }\n  watch(path, callback) {\n    /*\n    Watch a property and call the callback during update if it has changed.\n\n    @path -- A dotted path to the value\n\n      e.g. 'user.id'\n    \n    @callback -- a function to be called with (newValue, oldValue)\n    \n      e.g. (n,o) => alert(`Value changed from ${o} to ${n}`)\n\n    */\n    if (!this._watches_.hasOwnProperty(path)) {\n      this._watches_[path] = []\n    }\n    this._watches_[path].push(callback)\n    return this // Keep this because people will use it like on the wrapper.\n  }\n  _saveAs_(item, name){\n    this._named_[name] = item\n  }\n  _update_() {\n    this._updateWatches_()\n    this._nested_.forEach(n => n.update())\n  }\n  _updateWatches_() {\n    /*\n     * Iterates through watches. If the value has changed, call callback.\n     */\n    let path, newValue, previous\n    for (path in this._watches_) {\n      newValue = getProp(this, path)\n      previous = this._previous_[path]\n      if (previous !== newValue) {\n        this._watches_[path].forEach(fn => {\n          fn(newValue, previous)\n        })\n      }\n      this._previous_[path] = newValue\n    }\n  }\n}\n\n\nexport class Wrapper {\n  constructor(element, view) {\n    this.e = element\n    this._c = null\n    this.view = view\n  }\n  get Value() {\n    /* Returns the value of the element */\n    return this.e.value\n  }\n  as(name){\n    this.view._saveAs_(this, name)\n    return this\n  }\n  att(name, value) {\n    this.e.setAttribute(name, value)\n    return this\n  }\n  atts(atts) {\n    for (let name in atts) {\n      this.att(name, atts[name])\n    }\n    return this\n  }\n  checked(value) {\n    this.e.checked = value\n    return this\n  }\n  href(value) {\n    return this.att('href', value)\n  }\n  id(value) {\n    return this.att('id', value)\n  }\n  src(value) {\n    return this.att('src', value)\n  }\n  value(value) {\n    return this.att('value', value)\n  }\n  text(value) {\n    this.e.textContent = value\n    return this\n  }\n  child(item) {\n    this.e.appendChild(this._ge(item))\n    return this\n  }\n  clear() {\n    this.e.innerHTML = ''\n    this.e.textContent = ''\n    this.e.value = ''\n    return this\n  }\n  cls(style) {\n    this.e.className = style\n    return this\n  }\n  clsAdd(style) {\n    this.e.classList.add(style)\n    return this\n  }\n  clsAddTrans(style) {\n    return this.transition(_ => this.e.classList.add(style))\n  }\n  clsRemove(style) {\n    this.e.classList.remove(style)\n    return this\n  }\n  clsRemoveTrans(style) {\n    return this.transition(_ => this.e.classList.remove(style))\n  }\n  clsToggle(style) {\n    this.e.classList.toggle(style)\n    return this\n  }\n  f(desc, callback) {\n    /*\n     *   Follow a value and do something if it has changed.\n     * \n     *   This method has two forms.\n     * \n     *   If desc does not contain \":\" then the callback is simply called if the value \n     *   changes (during the component's update() call)\n     *\n     *   The callback parameters are (newVal, oldVal, wrapper) \n     *   E.g.\n     *\n     *      h('div').f('clickCount', (n,o,w) => w.text(n))\n     *\n     *   If the desc contains \":\" (e.g. \"text:clickCount\") then we assume what is to \n     *   the left of : to be a method of the wrapper to call if the value has changed.\n     *   E.g.\n     *\n     *       h('div').f('text:clickCount')  // equates to wrapper.text(newValue)\n     *   \n     *   In this form, a callback may be provided to transform the value before it is\n     *   used. Its parameters are (newVal, oldVal) \n     *   \n     *    E.g.\n     *\n     *       h('div').f('text:clickCount', (n,o) => `Click count is ${n}`)\n     *   \n     */\n    let path, func, chunks = desc.split(':')\n    if (chunks.length === 1) {\n      path = chunks[0]\n      func = (n,o) => callback(n,o,this)\n    } else {\n      let method = chunks[0]\n      path = chunks[1]\n      func = und(callback) ? n => this[method](n) : (n,o) => this[method](callback(n,o,this)) \n    }\n    this.view.watch(path, func)\n    return this\n  }\n  html(html) {\n    this.e.innerHTML = html\n    return this\n  }\n  inner(items) {\n    /*\n    Updates the element's children. \n\n    Operates differently if the use() method was called on the instance.\n\n    @items (standard mode) -- either:\n        A Wrapper.\n        A View instance.\n        Any other object, in which case we call toString().\n        An array containing any combination of the above.\n\n    @items (after calling use()) -- either:\n        An object which will be to build() or update() of\n        a view created from the viewClass previously passed to use().\n        An array of such objects.\n\n    On some browsers this may perform better using a document fragment.\n    */\n    let fn\n    if (!Array.isArray(items)) {items = [items]}\n    if (this._c) {\n      this._c.reset()\n      fn = item => this._c.getEl(item).root.e\n    } else {\n      fn = this._ge\n    }\n    return this._si(items, fn)\n  }\n  on(event, callback) {\n    this.e.addEventListener(event, e => callback(e, this))\n    return this\n  }\n  transition(fn) {\n    return new Promise(resolve => {\n      fn()\n      let transitionEnded = e => {\n        this.e.removeEventListener('transitionend', transitionEnded)\n        resolve()\n      }\n    this.e.addEventListener('transitionend', transitionEnded)\n    })\n  }\n  use(viewClass, cacheBy) {\n    /*\n    Modifies the behaviour of inner() to map the objects passed in to views\n    of the specified class, using caching.\n    See this._iv() and ViewCache.\n\n    @viewClass -- any valid subclass of View\n    @cacheBy -- either:\n        <undefined> in which case the sequence is used as key*\n        A string used to lookup a property on the item. Can be dotted. e.g. 'user.id'\n        A function called with (item, seq) which must return a key\n\n    */\n    this._c = new ViewCache(this.view.app, viewClass, cacheBy, this.view)\n    return this\n  }\n  _si(items, extractFn) {\n    this.clear()\n    items.forEach(item => {\n      this.e.appendChild(extractFn(item))\n    })\n    return this\n  }\n  _ge(item) {\n    /*\n    Returns a native element for attaching\n    */\n    if (item instanceof Wrapper) {\n      return item.e\n    } else if (item instanceof View) {\n      return item.root.e\n    } else if (item instanceof Node) {\n      return item\n    } else {\n      return doc.createTextNode(item.toString())\n    }\n  }\n}\n\n\nexport function transition(el, fn) {\n  return new Promise(resolve => {\n    fn()\n    let transitionEnded = e => {\n      el.removeEventListener('transitionend', transitionEnded)\n      resolve()\n    }\n  el.addEventListener('transitionend', transitionEnded)\n  })\n}\n\n\n\nexport class ViewCache {\n  constructor(app, viewClass, cacheBy, view) {\n    /*\n    An object which caches and returns views of a same type.\n    \n    @app -- an instance of App\n    @viewClass -- any valid subclass of View\n    @cacheBy -- either:\n        <undefined> in which case the sequence is used as key*\n        A string used to lookup a property on the item. Can be dotted. e.g. 'user.id'\n        A function called with (obj, seq) which must return a key\n    */\n    this._a = app\n    this._v = view\n    this._vc = viewClass\n    this._c = {}\n    this._k = cacheBy \n    this._seq = 0\n    if (und(cacheBy)) {\n      this._k = (obj, seq) => seq\n    } else if (isStr(cacheBy)) {\n      this._k = (obj, seq) => getProp(obj, cacheBy)\n    }\n  }\n  reset() {\n    this._seq = 0\n  }\n  getEl(obj) {\n    /*\n    Gets a view, potentially from cache\n    */\n    let view, key = this._k(obj, this._seq)\n    if (this._c.hasOwnProperty(key)) {\n      view = this._c[key]\n    } else {\n      view = new this._vc(this._a, obj, this._seq, this._v) // viewClass\n      this._c[key] = view\n    }\n    view.update(obj)\n    this._seq += 1\n    return view\n  }\n}\n\n\nfunction h(desc, atts, inner, view) {\n  /*\n   * Returns a new Wrapper around a new DOM element.\n   * @param {str} desc -- string representing an element type. e.g. 'div'. Any additional\n   * words are used as cls e.g. 'i far fa-bell' becomes <i class=\"far fa-bell\">\n   * @param {View} view -- optional the view which the \n  */\n  let tag, cls, w\n  [tag, ...cls] = desc.trim().split(' ')\n  w = new Wrapper(doc.createElement(tag), view)\n  cls.forEach(i => i.startsWith('#') ? w.att('id', i.slice(1)) : w.clsAdd(i)) // can supply an array - change?\n  w.atts(atts)\n  if(!und(inner)){ w.inner(inner)}\n  return w\n}\n\n\nexport function getNode(elementOrId) {\n  // We're assuming it starts with #\n  let el = isStr(elementOrId) ? doc.getElementById(elementOrId.slice(1)): elementOrId\n  return el\n}\n\n\nexport function bindWrapper(elementOrId, wrapper) {\n  let target = getNode(elementOrId)\n  target.parentNode.replaceChild(wrapper.e, target)\n}\n\n\n/* This function extracts properties from a target based on a path string\n *\n *   \"app.items.length\"\n *   \"app.items().length\"\n *\n * The path may include parentheses calls in which case the member is called.\n * The parentheses may not contain parameters.\n * It doesn't work for square brackets.\n */\nconst _red = (o,i)=> i.endsWith('()') ? o[i.substr(0, i.length -2)].bind(o)() : o[i]\nexport function getProp(target, path) {\n  return path.split('.').reduce(_red, target)\n}\n\n\nexport function und(x) {\n  return x === undefined\n}\n\nexport function isStr(x) {\n  return typeof x === 'string'\n}"],"names":["const","doc","document","App","constructor","_nested_","mount","viewClass","idEl","obj","view","this","root","push","update","forEach","v","View","app","seq","parent","s","undefined","_named_","_watches_","_previous_","_args_","box","bind","build","el","h","watch","init","as","name","_saveAs_","desc","atts","inner","tag","und","cls","w","trim","split","Wrapper","createElement","i","startsWith","att","slice","clsAdd","newObj","_update_","path","callback","hasOwnProperty","item","_updateWatches_","n","newValue","previous","getProp","fn","element","e","_c","prototypeAccessors","Value","value","setAttribute","let","checked","href","id","src","text","textContent","child","appendChild","_ge","clear","innerHTML","style","className","classList","add","clsAddTrans","transition","_","clsRemove","remove","clsRemoveTrans","clsToggle","toggle","f","func","chunks","length","o","method","html","items","Array","isArray","reset","getEl","_si","on","event","addEventListener","Promise","resolve","transitionEnded","removeEventListener","use","cacheBy","ViewCache","extractFn","Node","createTextNode","toString","_a","_v","_vc","_k","_seq","isStr","getNode","elementOrId","getElementById","bindWrapper","wrapper","target","parentNode","replaceChild","key","_red","endsWith","substr","reduce","x"],"mappings":"AAIAA,IAAMC,EAAMC,SAGCC,EAEXC,gBACOC,SAAW,IAElBC,YAAAA,eAAMC,EAAWC,EAAMC,OAOjBC,EAAO,IAAIH,EAAUI,KAAMF,KACnBD,EAAME,EAAKE,WAClBP,SAASQ,KAAKH,IAErBI,YAAAA,uBAEOT,SAASU,iBAAQC,UAAKA,EAAEF,gBAKpBG,EACXb,SAAYc,EAAKT,EAAKU,EAAKC,OACrBC,EAAIV,KACRU,EAAEH,IAAMA,EACRG,EAAEZ,IAAMA,EACRY,EAAEF,IAAMA,EACRE,EAAED,OAASA,EACXC,EAAET,UAAOU,EACTD,EAAEhB,SAAW,GACbgB,EAAEE,QAAU,GACZF,EAAEG,UAAY,GACdH,EAAEI,WAAa,GAGfJ,EAAEK,OAAS,CACTL,EAAEH,IACFG,EAAEM,IAAIC,KAAKP,GACXA,EAAEQ,MAAMD,KAAKP,GACbA,EAAES,GAAGF,KAAKP,GACVA,EAAEU,EAAEH,KAAKP,KACPZ,MACAU,IACFE,EAAEW,MAAMJ,KAAKP,MAEbY,WAAKZ,EAAGA,EAAEK,SAEdQ,YAAAA,YAAGC,eAGIf,OAAOgB,SAASzB,KAAMwB,GACpBxB,MAETkB,YAAAA,eAAMQ,EAAMC,EAAMC,UACT5B,KAAKC,KAAOD,KAAKoB,EAAEM,EAAMC,EAAMC,IAExCZ,YAAAA,aAAIpB,EAAWE,OAKTC,EAAO,IAAIH,EAAUI,KAAKO,IAAKT,OAAKa,EAAWX,kBAC9CN,SAASQ,KAAKH,GACZA,GAEToB,YAAAA,YAAGK,UACMxB,KAAKY,QAAQY,IAEtBJ,YAAAA,WAAES,EAAKF,EAAMC,UAIPE,EAAIF,OACED,IACD,IAiUb,SAAWD,EAAMC,EAAMC,EAAO7B,SAOxB8B,EAAKE,EAAKC,SACbH,KAAeH,EAAKO,OAAOC,MAAM,SAAzBH,aACTC,EAAI,IAAIG,EAAQ7C,EAAI8C,cAAcP,GAAM9B,GACxCgC,EAAI3B,iBAAQiC,UAAKA,EAAEC,WAAW,KAAON,EAAEO,IAAI,KAAMF,EAAEG,MAAM,IAAMR,EAAES,OAAOJ,KACxEL,EAAEL,KAAKA,GACHG,EAAIF,IAASI,EAAEJ,MAAMA,GAClBI,EA5UIZ,CAAES,EAAKF,EAAMC,EAAO5B,OAG/BG,YAAAA,gBAAOuC,GAKAZ,EAAIY,UACF5C,IAAM4C,QAERC,SAAS3C,KAAKe,SAErBM,YAAAA,eAAMuB,EAAMC,UAaL7C,KAAKa,UAAUiC,eAAeF,UAC5B/B,UAAU+B,GAAQ,SAEpB/B,UAAU+B,GAAM1C,KAAK2C,GACnB7C,MAETyB,YAAAA,kBAASsB,EAAMvB,QACRZ,QAAQY,GAAQuB,GAEvBJ,YAAAA,yBACOK,uBACAtD,SAASU,iBAAQ6C,UAAKA,EAAE9C,YAE/B6C,YAAAA,+BAIMJ,EAAMM,EAAUC,MACfP,KAAQ5C,KAAKa,YACLuC,EAAQpD,KAAM4C,MACd5C,KAAKc,WAAW8B,MACVM,QACVrC,UAAU+B,GAAMxC,iBAAQiD,GAC3BA,EAAGH,EAAUC,UAGZrC,WAAW8B,GAAQM,GAM9B,IAAaf,EACX1C,SAAY6D,EAASvD,QACdwD,EAAID,OACJE,GAAK,UACLzD,KAAOA,+BAEd0D,EAAIC,4BAEK1D,KAAKuD,EAAEI,OAEhBpC,YAAAA,YAAGC,eACIzB,KAAK0B,SAASzB,KAAMwB,GAClBxB,MAETuC,YAAAA,aAAIf,EAAMmC,eACHJ,EAAEK,aAAapC,EAAMmC,GACnB3D,MAET2B,YAAAA,cAAKA,OACEkC,IAAIrC,KAAQG,OACVY,IAAIf,EAAMG,EAAKH,WAEfxB,MAET8D,YAAAA,iBAAQH,eACDJ,EAAEO,QAAUH,EACV3D,MAET+D,YAAAA,cAAKJ,UACI3D,KAAKuC,IAAI,OAAQoB,IAE1BK,YAAAA,YAAGL,UACM3D,KAAKuC,IAAI,KAAMoB,IAExBM,YAAAA,aAAIN,UACK3D,KAAKuC,IAAI,MAAOoB,IAEzBA,YAAAA,eAAMA,UACG3D,KAAKuC,IAAI,QAASoB,IAE3BO,YAAAA,cAAKP,eACEJ,EAAEY,YAAcR,EACd3D,MAEToE,YAAAA,eAAMrB,eACCQ,EAAEc,YAAYrE,KAAKsE,IAAIvB,IACrB/C,MAETuE,YAAAA,6BACOhB,EAAEiB,UAAY,QACdjB,EAAEY,YAAc,QAChBZ,EAAEI,MAAQ,GACR3D,MAET+B,YAAAA,aAAI0C,eACGlB,EAAEmB,UAAYD,EACZzE,MAETyC,YAAAA,gBAAOgC,eACAlB,EAAEoB,UAAUC,IAAIH,GACdzE,MAET6E,YAAAA,qBAAYJ,qBACHzE,KAAK8E,oBAAWC,UAAK/E,EAAKuD,EAAEoB,UAAUC,IAAIH,MAEnDO,YAAAA,mBAAUP,eACHlB,EAAEoB,UAAUM,OAAOR,GACjBzE,MAETkF,YAAAA,wBAAeT,qBACNzE,KAAK8E,oBAAWC,UAAK/E,EAAKuD,EAAEoB,UAAUM,OAAOR,MAEtDU,YAAAA,mBAAUV,eACHlB,EAAEoB,UAAUS,OAAOX,GACjBzE,MAETqF,YAAAA,WAAE3D,EAAMmB,OA4BFD,EAAM0C,WAAe5D,EAAKQ,MAAM,QACd,IAAlBqD,EAAOC,OACT5C,EAAO2C,EAAO,GACdD,WAAQrC,EAAEwC,UAAM5C,EAASI,EAAEwC,EAAEzF,QACxB,KACD0F,EAASH,EAAO,GACpB3C,EAAO2C,EAAO,GACdD,EAAOxD,EAAIe,YAAYI,UAAKjD,EAAK0F,GAAQzC,aAAMA,EAAEwC,UAAMzF,EAAK0F,GAAQ7C,EAASI,EAAEwC,EAAEzF,iBAE9ED,KAAKsB,MAAMuB,EAAM0C,GACftF,MAET2F,YAAAA,cAAKA,eACEpC,EAAEiB,UAAYmB,EACZ3F,MAET4B,YAAAA,eAAMgE,OAmBAvC,gBACCwC,MAAMC,QAAQF,KAASA,EAAQ,CAACA,IACjC5F,KAAKwD,SACFA,GAAGuC,QACR1C,WAAKN,UAAQ/C,EAAKwD,GAAGwC,MAAMjD,GAAM9C,KAAKsD,IAEtCF,EAAKrD,KAAKsE,IAELtE,KAAKiG,IAAIL,EAAOvC,IAEzB6C,YAAAA,YAAGC,EAAOtD,0BACHU,EAAE6C,iBAAiBD,WAAO5C,UAAKV,EAASU,EAAGvD,KACzCA,MAET8E,YAAAA,oBAAWzB,qBACF,IAAIgD,iBAAQC,WAEbC,WAAkBhD,KACfA,EAAEiD,oBAAoB,gBAAiBD,UAG3ChD,EAAE6C,iBAAiB,gBAAiBG,MAG3CE,YAAAA,aAAI7G,EAAW8G,eAaRlD,GAAK,IAAImD,EAAU3G,KAAKD,KAAKQ,IAAKX,EAAW8G,EAAS1G,KAAKD,MACzDC,MAETiG,YAAAA,aAAIL,EAAOgB,0BACJrC,QACLqB,EAAMxF,iBAAQ2C,KACPQ,EAAEc,YAAYuC,EAAU7D,MAExB/C,MAETsE,YAAAA,aAAIvB,UAIEA,aAAgBZ,EACXY,EAAKQ,EACHR,aAAgBzC,EAClByC,EAAK9C,KAAKsD,EACRR,aAAgB8D,KAClB9D,EAEAzD,EAAIwH,eAAe/D,EAAKgE,wDAmBxBJ,EACXlH,SAAYc,EAAKX,EAAW8G,EAAS3G,QAW9BiH,GAAKzG,OACL0G,GAAKlH,OACLmH,IAAMtH,OACN4D,GAAK,QACL2D,GAAKT,OACLU,KAAO,EACRtF,EAAI4E,QACDS,YAAMrH,EAAKU,UAAQA,GACf6G,EAAMX,UACVS,YAAMrH,EAAKU,UAAQ4C,EAAQtD,EAAK4G,MAyCpC,SAASY,EAAQC,UAEbF,EAAME,GAAejI,EAAIkI,eAAeD,EAAY/E,MAAM,IAAK+E,EAKnE,SAASE,EAAYF,EAAaG,OACnCC,EAASL,EAAQC,GACrBI,EAAOC,WAAWC,aAAaH,EAAQnE,EAAGoE,GA/C1C5B,YAAAA,sBACOqB,KAAO,GAEdpB,YAAAA,eAAMlG,OAIAC,EAAM+H,EAAM9H,KAAKmH,GAAGrH,EAAKE,KAAKoH,aAC9BpH,KAAKwD,GAAGV,eAAegF,KAClB9H,KAAKwD,GAAGsE,MAER,IAAI9H,KAAKkH,IAAIlH,KAAKgH,GAAIlH,EAAKE,KAAKoH,KAAMpH,KAAKiH,SAC7CzD,GAAGsE,GAAO/H,GAEjBA,EAAKI,OAAOL,QACPsH,MAAQ,EACNrH,GA4CXV,IAAM0I,WAAQtC,EAAEpD,UAAKA,EAAE2F,SAAS,MAAQvC,EAAEpD,EAAE4F,OAAO,EAAG5F,EAAEmD,OAAQ,IAAIvE,KAAKwE,EAAjCA,GAAwCA,EAAEpD,IAC3E,SAASe,EAAQuE,EAAQ/E,UACvBA,EAAKV,MAAM,KAAKgG,OAAOH,EAAMJ,GAI/B,SAAS7F,EAAIqG,eACLxH,IAANwH,EAGF,SAASd,EAAMc,SACA,iBAANA,oEA5GT,SAAoBhH,EAAIkC,UACtB,IAAIgD,iBAAQC,GACjBjD,QACIkD,WAAkBhD,GACpBpC,EAAGqF,oBAAoB,gBAAiBD,GACxCD,KAEJnF,EAAGiF,iBAAiB,gBAAiBG"}